// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package appcontextsvc_client

import (
	context "context"
	base "gitlab.com/place-me/appcontextsvc-client-go/base"
	models "gitlab.com/place-me/appcontextsvc-client-go/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalUserServiceClient is the client API for ExternalUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalUserServiceClient interface {
	ListExternalUsers(ctx context.Context, in *base.ListRequest, opts ...grpc.CallOption) (*ListExternalUsersResponse, error)
	GetExternalUser(ctx context.Context, in *GetExternalUserRequest, opts ...grpc.CallOption) (*models.ExternalUser, error)
}

type externalUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalUserServiceClient(cc grpc.ClientConnInterface) ExternalUserServiceClient {
	return &externalUserServiceClient{cc}
}

func (c *externalUserServiceClient) ListExternalUsers(ctx context.Context, in *base.ListRequest, opts ...grpc.CallOption) (*ListExternalUsersResponse, error) {
	out := new(ListExternalUsersResponse)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalUserService/ListExternalUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalUserServiceClient) GetExternalUser(ctx context.Context, in *GetExternalUserRequest, opts ...grpc.CallOption) (*models.ExternalUser, error) {
	out := new(models.ExternalUser)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalUserService/GetExternalUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalUserServiceServer is the server API for ExternalUserService service.
// All implementations must embed UnimplementedExternalUserServiceServer
// for forward compatibility
type ExternalUserServiceServer interface {
	ListExternalUsers(context.Context, *base.ListRequest) (*ListExternalUsersResponse, error)
	GetExternalUser(context.Context, *GetExternalUserRequest) (*models.ExternalUser, error)
	mustEmbedUnimplementedExternalUserServiceServer()
}

// UnimplementedExternalUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalUserServiceServer struct {
}

func (UnimplementedExternalUserServiceServer) ListExternalUsers(context.Context, *base.ListRequest) (*ListExternalUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalUsers not implemented")
}
func (UnimplementedExternalUserServiceServer) GetExternalUser(context.Context, *GetExternalUserRequest) (*models.ExternalUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalUser not implemented")
}
func (UnimplementedExternalUserServiceServer) mustEmbedUnimplementedExternalUserServiceServer() {}

// UnsafeExternalUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalUserServiceServer will
// result in compilation errors.
type UnsafeExternalUserServiceServer interface {
	mustEmbedUnimplementedExternalUserServiceServer()
}

func RegisterExternalUserServiceServer(s grpc.ServiceRegistrar, srv ExternalUserServiceServer) {
	s.RegisterService(&ExternalUserService_ServiceDesc, srv)
}

func _ExternalUserService_ListExternalUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalUserServiceServer).ListExternalUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalUserService/ListExternalUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalUserServiceServer).ListExternalUsers(ctx, req.(*base.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalUserService_GetExternalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalUserServiceServer).GetExternalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalUserService/GetExternalUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalUserServiceServer).GetExternalUser(ctx, req.(*GetExternalUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalUserService_ServiceDesc is the grpc.ServiceDesc for ExternalUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appcontext.services.ExternalUserService",
	HandlerType: (*ExternalUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExternalUsers",
			Handler:    _ExternalUserService_ListExternalUsers_Handler,
		},
		{
			MethodName: "GetExternalUser",
			Handler:    _ExternalUserService_GetExternalUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external_user_svc.proto",
}
