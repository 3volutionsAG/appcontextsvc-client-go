// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: invitation_svc.proto

package appcontextsvc_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _invitation_svc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ConfirmInvitationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmInvitationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmInvitationRequestMultiError, or nil if none found.
func (m *ConfirmInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInvitationId() != "" {

		if err := m._validateUuid(m.GetInvitationId()); err != nil {
			err = ConfirmInvitationRequestValidationError{
				field:  "InvitationId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ConfirmInvitationRequestMultiError(errors)
	}

	return nil
}

func (m *ConfirmInvitationRequest) _validateUuid(uuid string) error {
	if matched := _invitation_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ConfirmInvitationRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmInvitationRequestMultiError) AllErrors() []error { return m }

// ConfirmInvitationRequestValidationError is the validation error returned by
// ConfirmInvitationRequest.Validate if the designated constraints aren't met.
type ConfirmInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmInvitationRequestValidationError) ErrorName() string {
	return "ConfirmInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmInvitationRequestValidationError{}

// Validate checks the field values on InviteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InviteRequestMultiError, or
// nil if none found.
func (m *InviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsersToInvite() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InviteRequestValidationError{
						field:  fmt.Sprintf("UsersToInvite[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InviteRequestValidationError{
						field:  fmt.Sprintf("UsersToInvite[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InviteRequestValidationError{
					field:  fmt.Sprintf("UsersToInvite[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InviteRequestMultiError(errors)
	}

	return nil
}

// InviteRequestMultiError is an error wrapping multiple validation errors
// returned by InviteRequest.ValidateAll() if the designated constraints
// aren't met.
type InviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteRequestMultiError) AllErrors() []error { return m }

// InviteRequestValidationError is the validation error returned by
// InviteRequest.Validate if the designated constraints aren't met.
type InviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteRequestValidationError) ErrorName() string { return "InviteRequestValidationError" }

// Error satisfies the builtin error interface
func (e InviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteRequestValidationError{}

// Validate checks the field values on ResendInvitationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResendInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResendInvitationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResendInvitationRequestMultiError, or nil if none found.
func (m *ResendInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResendInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserprofile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResendInvitationRequestValidationError{
					field:  "Userprofile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResendInvitationRequestValidationError{
					field:  "Userprofile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserprofile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendInvitationRequestValidationError{
				field:  "Userprofile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResendInvitationRequestMultiError(errors)
	}

	return nil
}

// ResendInvitationRequestMultiError is an error wrapping multiple validation
// errors returned by ResendInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type ResendInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResendInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResendInvitationRequestMultiError) AllErrors() []error { return m }

// ResendInvitationRequestValidationError is the validation error returned by
// ResendInvitationRequest.Validate if the designated constraints aren't met.
type ResendInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendInvitationRequestValidationError) ErrorName() string {
	return "ResendInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendInvitationRequestValidationError{}
