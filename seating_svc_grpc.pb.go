// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: seating_svc.proto

package appcontextsvc_client

import (
	context "context"
	models "gitlab.com/place-me/appcontextsvc-client-go/models"
	common "gitlab.com/place-me/place-to-go/grpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatingServiceClient is the client API for SeatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatingServiceClient interface {
	ListSeatings(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*ListSeatingsResponse, error)
	GetSeating(ctx context.Context, in *GetSeatingRequest, opts ...grpc.CallOption) (*models.Seating, error)
	CreateSeating(ctx context.Context, in *CreateSeatingRequest, opts ...grpc.CallOption) (*models.Seating, error)
	UpdateSeating(ctx context.Context, in *UpdateSeatingRequest, opts ...grpc.CallOption) (*models.Seating, error)
	DeleteSeating(ctx context.Context, in *DeleteSeatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type seatingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatingServiceClient(cc grpc.ClientConnInterface) SeatingServiceClient {
	return &seatingServiceClient{cc}
}

func (c *seatingServiceClient) ListSeatings(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*ListSeatingsResponse, error) {
	out := new(ListSeatingsResponse)
	err := c.cc.Invoke(ctx, "/appcontext.services.SeatingService/ListSeatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatingServiceClient) GetSeating(ctx context.Context, in *GetSeatingRequest, opts ...grpc.CallOption) (*models.Seating, error) {
	out := new(models.Seating)
	err := c.cc.Invoke(ctx, "/appcontext.services.SeatingService/GetSeating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatingServiceClient) CreateSeating(ctx context.Context, in *CreateSeatingRequest, opts ...grpc.CallOption) (*models.Seating, error) {
	out := new(models.Seating)
	err := c.cc.Invoke(ctx, "/appcontext.services.SeatingService/CreateSeating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatingServiceClient) UpdateSeating(ctx context.Context, in *UpdateSeatingRequest, opts ...grpc.CallOption) (*models.Seating, error) {
	out := new(models.Seating)
	err := c.cc.Invoke(ctx, "/appcontext.services.SeatingService/UpdateSeating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatingServiceClient) DeleteSeating(ctx context.Context, in *DeleteSeatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appcontext.services.SeatingService/DeleteSeating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatingServiceServer is the server API for SeatingService service.
// All implementations must embed UnimplementedSeatingServiceServer
// for forward compatibility
type SeatingServiceServer interface {
	ListSeatings(context.Context, *common.ListRequest) (*ListSeatingsResponse, error)
	GetSeating(context.Context, *GetSeatingRequest) (*models.Seating, error)
	CreateSeating(context.Context, *CreateSeatingRequest) (*models.Seating, error)
	UpdateSeating(context.Context, *UpdateSeatingRequest) (*models.Seating, error)
	DeleteSeating(context.Context, *DeleteSeatingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSeatingServiceServer()
}

// UnimplementedSeatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatingServiceServer struct {
}

func (UnimplementedSeatingServiceServer) ListSeatings(context.Context, *common.ListRequest) (*ListSeatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatings not implemented")
}
func (UnimplementedSeatingServiceServer) GetSeating(context.Context, *GetSeatingRequest) (*models.Seating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeating not implemented")
}
func (UnimplementedSeatingServiceServer) CreateSeating(context.Context, *CreateSeatingRequest) (*models.Seating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeating not implemented")
}
func (UnimplementedSeatingServiceServer) UpdateSeating(context.Context, *UpdateSeatingRequest) (*models.Seating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeating not implemented")
}
func (UnimplementedSeatingServiceServer) DeleteSeating(context.Context, *DeleteSeatingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeating not implemented")
}
func (UnimplementedSeatingServiceServer) mustEmbedUnimplementedSeatingServiceServer() {}

// UnsafeSeatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatingServiceServer will
// result in compilation errors.
type UnsafeSeatingServiceServer interface {
	mustEmbedUnimplementedSeatingServiceServer()
}

func RegisterSeatingServiceServer(s grpc.ServiceRegistrar, srv SeatingServiceServer) {
	s.RegisterService(&SeatingService_ServiceDesc, srv)
}

func _SeatingService_ListSeatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServiceServer).ListSeatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.SeatingService/ListSeatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServiceServer).ListSeatings(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatingService_GetSeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServiceServer).GetSeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.SeatingService/GetSeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServiceServer).GetSeating(ctx, req.(*GetSeatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatingService_CreateSeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServiceServer).CreateSeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.SeatingService/CreateSeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServiceServer).CreateSeating(ctx, req.(*CreateSeatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatingService_UpdateSeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServiceServer).UpdateSeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.SeatingService/UpdateSeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServiceServer).UpdateSeating(ctx, req.(*UpdateSeatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatingService_DeleteSeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServiceServer).DeleteSeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.SeatingService/DeleteSeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServiceServer).DeleteSeating(ctx, req.(*DeleteSeatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatingService_ServiceDesc is the grpc.ServiceDesc for SeatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appcontext.services.SeatingService",
	HandlerType: (*SeatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSeatings",
			Handler:    _SeatingService_ListSeatings_Handler,
		},
		{
			MethodName: "GetSeating",
			Handler:    _SeatingService_GetSeating_Handler,
		},
		{
			MethodName: "CreateSeating",
			Handler:    _SeatingService_CreateSeating_Handler,
		},
		{
			MethodName: "UpdateSeating",
			Handler:    _SeatingService_UpdateSeating_Handler,
		},
		{
			MethodName: "DeleteSeating",
			Handler:    _SeatingService_DeleteSeating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seating_svc.proto",
}
