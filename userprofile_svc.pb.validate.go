// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: userprofile_svc.proto

package appcontextsvc_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _userprofile_svc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListUserprofilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserprofilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserprofilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserprofilesResponseMultiError, or nil if none found.
func (m *ListUserprofilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserprofilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserprofiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserprofilesResponseValidationError{
						field:  fmt.Sprintf("Userprofiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserprofilesResponseValidationError{
						field:  fmt.Sprintf("Userprofiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserprofilesResponseValidationError{
					field:  fmt.Sprintf("Userprofiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListUserprofilesResponseMultiError(errors)
	}

	return nil
}

// ListUserprofilesResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserprofilesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserprofilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserprofilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserprofilesResponseMultiError) AllErrors() []error { return m }

// ListUserprofilesResponseValidationError is the validation error returned by
// ListUserprofilesResponse.Validate if the designated constraints aren't met.
type ListUserprofilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserprofilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserprofilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserprofilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserprofilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserprofilesResponseValidationError) ErrorName() string {
	return "ListUserprofilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserprofilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserprofilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserprofilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserprofilesResponseValidationError{}

// Validate checks the field values on GetUserprofileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserprofileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserprofileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserprofileRequestMultiError, or nil if none found.
func (m *GetUserprofileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserprofileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = GetUserprofileRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Include != nil {
		// no validation rules for Include
	}

	if len(errors) > 0 {
		return GetUserprofileRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserprofileRequest) _validateUuid(uuid string) error {
	if matched := _userprofile_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserprofileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserprofileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserprofileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserprofileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserprofileRequestMultiError) AllErrors() []error { return m }

// GetUserprofileRequestValidationError is the validation error returned by
// GetUserprofileRequest.Validate if the designated constraints aren't met.
type GetUserprofileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserprofileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserprofileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserprofileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserprofileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserprofileRequestValidationError) ErrorName() string {
	return "GetUserprofileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserprofileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserprofileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserprofileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserprofileRequestValidationError{}

// Validate checks the field values on GetUserprofileByKratosIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserprofileByKratosIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserprofileByKratosIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserprofileByKratosIdRequestMultiError, or nil if none found.
func (m *GetUserprofileByKratosIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserprofileByKratosIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKratosId() != "" {

		if err := m._validateUuid(m.GetKratosId()); err != nil {
			err = GetUserprofileByKratosIdRequestValidationError{
				field:  "KratosId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetUserprofileByKratosIdRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserprofileByKratosIdRequest) _validateUuid(uuid string) error {
	if matched := _userprofile_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserprofileByKratosIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserprofileByKratosIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserprofileByKratosIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserprofileByKratosIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserprofileByKratosIdRequestMultiError) AllErrors() []error { return m }

// GetUserprofileByKratosIdRequestValidationError is the validation error
// returned by GetUserprofileByKratosIdRequest.Validate if the designated
// constraints aren't met.
type GetUserprofileByKratosIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserprofileByKratosIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserprofileByKratosIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserprofileByKratosIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserprofileByKratosIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserprofileByKratosIdRequestValidationError) ErrorName() string {
	return "GetUserprofileByKratosIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserprofileByKratosIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserprofileByKratosIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserprofileByKratosIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserprofileByKratosIdRequestValidationError{}

// Validate checks the field values on CreateUserprofileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserprofileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserprofileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserprofileRequestMultiError, or nil if none found.
func (m *CreateUserprofileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserprofileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserprofile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserprofileRequestValidationError{
					field:  "Userprofile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserprofileRequestValidationError{
					field:  "Userprofile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserprofile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserprofileRequestValidationError{
				field:  "Userprofile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserprofileRequestMultiError(errors)
	}

	return nil
}

// CreateUserprofileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserprofileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserprofileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserprofileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserprofileRequestMultiError) AllErrors() []error { return m }

// CreateUserprofileRequestValidationError is the validation error returned by
// CreateUserprofileRequest.Validate if the designated constraints aren't met.
type CreateUserprofileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserprofileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserprofileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserprofileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserprofileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserprofileRequestValidationError) ErrorName() string {
	return "CreateUserprofileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserprofileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserprofileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserprofileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserprofileRequestValidationError{}

// Validate checks the field values on UpdateUserprofileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserprofileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserprofileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserprofileRequestMultiError, or nil if none found.
func (m *UpdateUserprofileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserprofileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserprofile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserprofileRequestValidationError{
					field:  "Userprofile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserprofileRequestValidationError{
					field:  "Userprofile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserprofile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserprofileRequestValidationError{
				field:  "Userprofile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserprofileRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserprofileRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserprofileRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserprofileRequestMultiError(errors)
	}

	return nil
}

// UpdateUserprofileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserprofileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserprofileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserprofileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserprofileRequestMultiError) AllErrors() []error { return m }

// UpdateUserprofileRequestValidationError is the validation error returned by
// UpdateUserprofileRequest.Validate if the designated constraints aren't met.
type UpdateUserprofileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserprofileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserprofileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserprofileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserprofileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserprofileRequestValidationError) ErrorName() string {
	return "UpdateUserprofileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserprofileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserprofileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserprofileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserprofileRequestValidationError{}

// Validate checks the field values on DeleteUserprofileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserprofileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserprofileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserprofileRequestMultiError, or nil if none found.
func (m *DeleteUserprofileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserprofileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = DeleteUserprofileRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteUserprofileRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteUserprofileRequest) _validateUuid(uuid string) error {
	if matched := _userprofile_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteUserprofileRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserprofileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserprofileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserprofileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserprofileRequestMultiError) AllErrors() []error { return m }

// DeleteUserprofileRequestValidationError is the validation error returned by
// DeleteUserprofileRequest.Validate if the designated constraints aren't met.
type DeleteUserprofileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserprofileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserprofileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserprofileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserprofileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserprofileRequestValidationError) ErrorName() string {
	return "DeleteUserprofileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserprofileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserprofileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserprofileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserprofileRequestValidationError{}
