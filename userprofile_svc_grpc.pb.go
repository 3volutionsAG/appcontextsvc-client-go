// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package appcontextsvc_client

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	base "gitlab.com/place-me/appcontextsvc-client-go/base"
	models "gitlab.com/place-me/appcontextsvc-client-go/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserprofileServiceClient is the client API for UserprofileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserprofileServiceClient interface {
	ListUserprofiles(ctx context.Context, in *base.ListRequest, opts ...grpc.CallOption) (*ListUserprofilesResponse, error)
	GetUserprofile(ctx context.Context, in *GetUserprofileRequest, opts ...grpc.CallOption) (*models.Userprofile, error)
	GetUserprofileByKratosId(ctx context.Context, in *GetUserprofileByKratosIdRequest, opts ...grpc.CallOption) (*models.Userprofile, error)
	CreateUserprofile(ctx context.Context, in *CreateUserprofileRequest, opts ...grpc.CallOption) (*models.Userprofile, error)
	UpdateUserprofile(ctx context.Context, in *UpdateUserprofileRequest, opts ...grpc.CallOption) (*models.Userprofile, error)
	DeleteUserprofile(ctx context.Context, in *DeleteUserprofileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userprofileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserprofileServiceClient(cc grpc.ClientConnInterface) UserprofileServiceClient {
	return &userprofileServiceClient{cc}
}

func (c *userprofileServiceClient) ListUserprofiles(ctx context.Context, in *base.ListRequest, opts ...grpc.CallOption) (*ListUserprofilesResponse, error) {
	out := new(ListUserprofilesResponse)
	err := c.cc.Invoke(ctx, "/appcontext.services.UserprofileService/ListUserprofiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userprofileServiceClient) GetUserprofile(ctx context.Context, in *GetUserprofileRequest, opts ...grpc.CallOption) (*models.Userprofile, error) {
	out := new(models.Userprofile)
	err := c.cc.Invoke(ctx, "/appcontext.services.UserprofileService/GetUserprofile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userprofileServiceClient) GetUserprofileByKratosId(ctx context.Context, in *GetUserprofileByKratosIdRequest, opts ...grpc.CallOption) (*models.Userprofile, error) {
	out := new(models.Userprofile)
	err := c.cc.Invoke(ctx, "/appcontext.services.UserprofileService/GetUserprofileByKratosId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userprofileServiceClient) CreateUserprofile(ctx context.Context, in *CreateUserprofileRequest, opts ...grpc.CallOption) (*models.Userprofile, error) {
	out := new(models.Userprofile)
	err := c.cc.Invoke(ctx, "/appcontext.services.UserprofileService/CreateUserprofile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userprofileServiceClient) UpdateUserprofile(ctx context.Context, in *UpdateUserprofileRequest, opts ...grpc.CallOption) (*models.Userprofile, error) {
	out := new(models.Userprofile)
	err := c.cc.Invoke(ctx, "/appcontext.services.UserprofileService/UpdateUserprofile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userprofileServiceClient) DeleteUserprofile(ctx context.Context, in *DeleteUserprofileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appcontext.services.UserprofileService/DeleteUserprofile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserprofileServiceServer is the server API for UserprofileService service.
// All implementations must embed UnimplementedUserprofileServiceServer
// for forward compatibility
type UserprofileServiceServer interface {
	ListUserprofiles(context.Context, *base.ListRequest) (*ListUserprofilesResponse, error)
	GetUserprofile(context.Context, *GetUserprofileRequest) (*models.Userprofile, error)
	GetUserprofileByKratosId(context.Context, *GetUserprofileByKratosIdRequest) (*models.Userprofile, error)
	CreateUserprofile(context.Context, *CreateUserprofileRequest) (*models.Userprofile, error)
	UpdateUserprofile(context.Context, *UpdateUserprofileRequest) (*models.Userprofile, error)
	DeleteUserprofile(context.Context, *DeleteUserprofileRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUserprofileServiceServer()
}

// UnimplementedUserprofileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserprofileServiceServer struct {
}

func (UnimplementedUserprofileServiceServer) ListUserprofiles(context.Context, *base.ListRequest) (*ListUserprofilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserprofiles not implemented")
}
func (UnimplementedUserprofileServiceServer) GetUserprofile(context.Context, *GetUserprofileRequest) (*models.Userprofile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserprofile not implemented")
}
func (UnimplementedUserprofileServiceServer) GetUserprofileByKratosId(context.Context, *GetUserprofileByKratosIdRequest) (*models.Userprofile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserprofileByKratosId not implemented")
}
func (UnimplementedUserprofileServiceServer) CreateUserprofile(context.Context, *CreateUserprofileRequest) (*models.Userprofile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserprofile not implemented")
}
func (UnimplementedUserprofileServiceServer) UpdateUserprofile(context.Context, *UpdateUserprofileRequest) (*models.Userprofile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserprofile not implemented")
}
func (UnimplementedUserprofileServiceServer) DeleteUserprofile(context.Context, *DeleteUserprofileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserprofile not implemented")
}
func (UnimplementedUserprofileServiceServer) mustEmbedUnimplementedUserprofileServiceServer() {}

// UnsafeUserprofileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserprofileServiceServer will
// result in compilation errors.
type UnsafeUserprofileServiceServer interface {
	mustEmbedUnimplementedUserprofileServiceServer()
}

func RegisterUserprofileServiceServer(s grpc.ServiceRegistrar, srv UserprofileServiceServer) {
	s.RegisterService(&UserprofileService_ServiceDesc, srv)
}

func _UserprofileService_ListUserprofiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserprofileServiceServer).ListUserprofiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.UserprofileService/ListUserprofiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserprofileServiceServer).ListUserprofiles(ctx, req.(*base.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserprofileService_GetUserprofile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserprofileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserprofileServiceServer).GetUserprofile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.UserprofileService/GetUserprofile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserprofileServiceServer).GetUserprofile(ctx, req.(*GetUserprofileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserprofileService_GetUserprofileByKratosId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserprofileByKratosIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserprofileServiceServer).GetUserprofileByKratosId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.UserprofileService/GetUserprofileByKratosId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserprofileServiceServer).GetUserprofileByKratosId(ctx, req.(*GetUserprofileByKratosIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserprofileService_CreateUserprofile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserprofileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserprofileServiceServer).CreateUserprofile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.UserprofileService/CreateUserprofile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserprofileServiceServer).CreateUserprofile(ctx, req.(*CreateUserprofileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserprofileService_UpdateUserprofile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserprofileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserprofileServiceServer).UpdateUserprofile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.UserprofileService/UpdateUserprofile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserprofileServiceServer).UpdateUserprofile(ctx, req.(*UpdateUserprofileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserprofileService_DeleteUserprofile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserprofileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserprofileServiceServer).DeleteUserprofile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.UserprofileService/DeleteUserprofile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserprofileServiceServer).DeleteUserprofile(ctx, req.(*DeleteUserprofileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserprofileService_ServiceDesc is the grpc.ServiceDesc for UserprofileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserprofileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appcontext.services.UserprofileService",
	HandlerType: (*UserprofileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserprofiles",
			Handler:    _UserprofileService_ListUserprofiles_Handler,
		},
		{
			MethodName: "GetUserprofile",
			Handler:    _UserprofileService_GetUserprofile_Handler,
		},
		{
			MethodName: "GetUserprofileByKratosId",
			Handler:    _UserprofileService_GetUserprofileByKratosId_Handler,
		},
		{
			MethodName: "CreateUserprofile",
			Handler:    _UserprofileService_CreateUserprofile_Handler,
		},
		{
			MethodName: "UpdateUserprofile",
			Handler:    _UserprofileService_UpdateUserprofile_Handler,
		},
		{
			MethodName: "DeleteUserprofile",
			Handler:    _UserprofileService_DeleteUserprofile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userprofile_svc.proto",
}
