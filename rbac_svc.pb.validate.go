// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rbac_svc.proto

package appcontextsvc_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _rbac_svc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AssignSubjectToRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignSubjectToRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignSubjectToRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignSubjectToRoleRequestMultiError, or nil if none found.
func (m *AssignSubjectToRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignSubjectToRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSubject()); err != nil {
		err = AssignSubjectToRoleRequestValidationError{
			field:  "Subject",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = AssignSubjectToRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignSubjectToRoleRequestMultiError(errors)
	}

	return nil
}

func (m *AssignSubjectToRoleRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignSubjectToRoleRequestMultiError is an error wrapping multiple
// validation errors returned by AssignSubjectToRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type AssignSubjectToRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignSubjectToRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignSubjectToRoleRequestMultiError) AllErrors() []error { return m }

// AssignSubjectToRoleRequestValidationError is the validation error returned
// by AssignSubjectToRoleRequest.Validate if the designated constraints aren't met.
type AssignSubjectToRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignSubjectToRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignSubjectToRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignSubjectToRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignSubjectToRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignSubjectToRoleRequestValidationError) ErrorName() string {
	return "AssignSubjectToRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignSubjectToRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignSubjectToRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignSubjectToRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignSubjectToRoleRequestValidationError{}

// Validate checks the field values on RemoveSubjectFromRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSubjectFromRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSubjectFromRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveSubjectFromRoleRequestMultiError, or nil if none found.
func (m *RemoveSubjectFromRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSubjectFromRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSubject()); err != nil {
		err = RemoveSubjectFromRoleRequestValidationError{
			field:  "Subject",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = RemoveSubjectFromRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveSubjectFromRoleRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveSubjectFromRoleRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveSubjectFromRoleRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveSubjectFromRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveSubjectFromRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSubjectFromRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSubjectFromRoleRequestMultiError) AllErrors() []error { return m }

// RemoveSubjectFromRoleRequestValidationError is the validation error returned
// by RemoveSubjectFromRoleRequest.Validate if the designated constraints
// aren't met.
type RemoveSubjectFromRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSubjectFromRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSubjectFromRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSubjectFromRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSubjectFromRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSubjectFromRoleRequestValidationError) ErrorName() string {
	return "RemoveSubjectFromRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSubjectFromRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSubjectFromRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSubjectFromRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSubjectFromRoleRequestValidationError{}

// Validate checks the field values on AssignPermissionToRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignPermissionToRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionToRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignPermissionToRoleRequestMultiError, or nil if none found.
func (m *AssignPermissionToRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionToRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPermissionId()); err != nil {
		err = AssignPermissionToRoleRequestValidationError{
			field:  "PermissionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = AssignPermissionToRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignPermissionToRoleRequestMultiError(errors)
	}

	return nil
}

func (m *AssignPermissionToRoleRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignPermissionToRoleRequestMultiError is an error wrapping multiple
// validation errors returned by AssignPermissionToRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignPermissionToRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionToRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionToRoleRequestMultiError) AllErrors() []error { return m }

// AssignPermissionToRoleRequestValidationError is the validation error
// returned by AssignPermissionToRoleRequest.Validate if the designated
// constraints aren't met.
type AssignPermissionToRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionToRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionToRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionToRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionToRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionToRoleRequestValidationError) ErrorName() string {
	return "AssignPermissionToRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionToRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionToRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionToRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionToRoleRequestValidationError{}

// Validate checks the field values on RemovePermissionFromRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePermissionFromRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionFromRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemovePermissionFromRoleRequestMultiError, or nil if none found.
func (m *RemovePermissionFromRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionFromRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPermissionId()); err != nil {
		err = RemovePermissionFromRoleRequestValidationError{
			field:  "PermissionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = RemovePermissionFromRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemovePermissionFromRoleRequestMultiError(errors)
	}

	return nil
}

func (m *RemovePermissionFromRoleRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemovePermissionFromRoleRequestMultiError is an error wrapping multiple
// validation errors returned by RemovePermissionFromRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type RemovePermissionFromRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionFromRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionFromRoleRequestMultiError) AllErrors() []error { return m }

// RemovePermissionFromRoleRequestValidationError is the validation error
// returned by RemovePermissionFromRoleRequest.Validate if the designated
// constraints aren't met.
type RemovePermissionFromRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionFromRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionFromRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionFromRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionFromRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionFromRoleRequestValidationError) ErrorName() string {
	return "RemovePermissionFromRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionFromRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionFromRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionFromRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionFromRoleRequestValidationError{}

// Validate checks the field values on AssignedRolesFromSubjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignedRolesFromSubjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedRolesFromSubjectRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignedRolesFromSubjectRequestMultiError, or nil if none found.
func (m *AssignedRolesFromSubjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedRolesFromSubjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSubject()); err != nil {
		err = AssignedRolesFromSubjectRequestValidationError{
			field:  "Subject",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignedRolesFromSubjectRequestMultiError(errors)
	}

	return nil
}

func (m *AssignedRolesFromSubjectRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignedRolesFromSubjectRequestMultiError is an error wrapping multiple
// validation errors returned by AssignedRolesFromSubjectRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignedRolesFromSubjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedRolesFromSubjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedRolesFromSubjectRequestMultiError) AllErrors() []error { return m }

// AssignedRolesFromSubjectRequestValidationError is the validation error
// returned by AssignedRolesFromSubjectRequest.Validate if the designated
// constraints aren't met.
type AssignedRolesFromSubjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedRolesFromSubjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedRolesFromSubjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedRolesFromSubjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedRolesFromSubjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedRolesFromSubjectRequestValidationError) ErrorName() string {
	return "AssignedRolesFromSubjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedRolesFromSubjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedRolesFromSubjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedRolesFromSubjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedRolesFromSubjectRequestValidationError{}

// Validate checks the field values on AssignedSubjectsFromRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignedSubjectsFromRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedSubjectsFromRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignedSubjectsFromRoleRequestMultiError, or nil if none found.
func (m *AssignedSubjectsFromRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedSubjectsFromRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = AssignedSubjectsFromRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignedSubjectsFromRoleRequestMultiError(errors)
	}

	return nil
}

func (m *AssignedSubjectsFromRoleRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignedSubjectsFromRoleRequestMultiError is an error wrapping multiple
// validation errors returned by AssignedSubjectsFromRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignedSubjectsFromRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedSubjectsFromRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedSubjectsFromRoleRequestMultiError) AllErrors() []error { return m }

// AssignedSubjectsFromRoleRequestValidationError is the validation error
// returned by AssignedSubjectsFromRoleRequest.Validate if the designated
// constraints aren't met.
type AssignedSubjectsFromRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedSubjectsFromRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedSubjectsFromRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedSubjectsFromRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedSubjectsFromRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedSubjectsFromRoleRequestValidationError) ErrorName() string {
	return "AssignedSubjectsFromRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedSubjectsFromRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedSubjectsFromRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedSubjectsFromRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedSubjectsFromRoleRequestValidationError{}

// Validate checks the field values on AssignedRolesFromPermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AssignedRolesFromPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedRolesFromPermissionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssignedRolesFromPermissionRequestMultiError, or nil if none found.
func (m *AssignedRolesFromPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedRolesFromPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPermissionId()); err != nil {
		err = AssignedRolesFromPermissionRequestValidationError{
			field:  "PermissionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignedRolesFromPermissionRequestMultiError(errors)
	}

	return nil
}

func (m *AssignedRolesFromPermissionRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignedRolesFromPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by
// AssignedRolesFromPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignedRolesFromPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedRolesFromPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedRolesFromPermissionRequestMultiError) AllErrors() []error { return m }

// AssignedRolesFromPermissionRequestValidationError is the validation error
// returned by AssignedRolesFromPermissionRequest.Validate if the designated
// constraints aren't met.
type AssignedRolesFromPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedRolesFromPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedRolesFromPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedRolesFromPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedRolesFromPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedRolesFromPermissionRequestValidationError) ErrorName() string {
	return "AssignedRolesFromPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedRolesFromPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedRolesFromPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedRolesFromPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedRolesFromPermissionRequestValidationError{}

// Validate checks the field values on AssignedPermissionsFromRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AssignedPermissionsFromRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedPermissionsFromRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssignedPermissionsFromRoleRequestMultiError, or nil if none found.
func (m *AssignedPermissionsFromRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedPermissionsFromRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = AssignedPermissionsFromRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignedPermissionsFromRoleRequestMultiError(errors)
	}

	return nil
}

func (m *AssignedPermissionsFromRoleRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignedPermissionsFromRoleRequestMultiError is an error wrapping multiple
// validation errors returned by
// AssignedPermissionsFromRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignedPermissionsFromRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedPermissionsFromRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedPermissionsFromRoleRequestMultiError) AllErrors() []error { return m }

// AssignedPermissionsFromRoleRequestValidationError is the validation error
// returned by AssignedPermissionsFromRoleRequest.Validate if the designated
// constraints aren't met.
type AssignedPermissionsFromRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedPermissionsFromRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedPermissionsFromRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedPermissionsFromRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedPermissionsFromRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedPermissionsFromRoleRequestValidationError) ErrorName() string {
	return "AssignedPermissionsFromRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedPermissionsFromRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedPermissionsFromRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedPermissionsFromRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedPermissionsFromRoleRequestValidationError{}

// Validate checks the field values on AssignedPermissionsFromSubjectRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssignedPermissionsFromSubjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedPermissionsFromSubjectRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssignedPermissionsFromSubjectRequestMultiError, or nil if none found.
func (m *AssignedPermissionsFromSubjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedPermissionsFromSubjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSubject()); err != nil {
		err = AssignedPermissionsFromSubjectRequestValidationError{
			field:  "Subject",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignedPermissionsFromSubjectRequestMultiError(errors)
	}

	return nil
}

func (m *AssignedPermissionsFromSubjectRequest) _validateUuid(uuid string) error {
	if matched := _rbac_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignedPermissionsFromSubjectRequestMultiError is an error wrapping
// multiple validation errors returned by
// AssignedPermissionsFromSubjectRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignedPermissionsFromSubjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedPermissionsFromSubjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedPermissionsFromSubjectRequestMultiError) AllErrors() []error { return m }

// AssignedPermissionsFromSubjectRequestValidationError is the validation error
// returned by AssignedPermissionsFromSubjectRequest.Validate if the
// designated constraints aren't met.
type AssignedPermissionsFromSubjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedPermissionsFromSubjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedPermissionsFromSubjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedPermissionsFromSubjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedPermissionsFromSubjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedPermissionsFromSubjectRequestValidationError) ErrorName() string {
	return "AssignedPermissionsFromSubjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedPermissionsFromSubjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedPermissionsFromSubjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedPermissionsFromSubjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedPermissionsFromSubjectRequestValidationError{}

// Validate checks the field values on AssignedPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignedPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignedPermissionsResponseMultiError, or nil if none found.
func (m *AssignedPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssignedPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssignedPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssignedPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return AssignedPermissionsResponseMultiError(errors)
	}

	return nil
}

// AssignedPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by AssignedPermissionsResponse.ValidateAll() if
// the designated constraints aren't met.
type AssignedPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedPermissionsResponseMultiError) AllErrors() []error { return m }

// AssignedPermissionsResponseValidationError is the validation error returned
// by AssignedPermissionsResponse.Validate if the designated constraints
// aren't met.
type AssignedPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedPermissionsResponseValidationError) ErrorName() string {
	return "AssignedPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedPermissionsResponseValidationError{}

// Validate checks the field values on AssignedSubjectsFromRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AssignedSubjectsFromRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedSubjectsFromRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignedSubjectsFromRoleResponseMultiError, or nil if none found.
func (m *AssignedSubjectsFromRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedSubjectsFromRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssignedSubjectsFromRoleResponseValidationError{
						field:  fmt.Sprintf("Subjects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssignedSubjectsFromRoleResponseValidationError{
						field:  fmt.Sprintf("Subjects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssignedSubjectsFromRoleResponseValidationError{
					field:  fmt.Sprintf("Subjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return AssignedSubjectsFromRoleResponseMultiError(errors)
	}

	return nil
}

// AssignedSubjectsFromRoleResponseMultiError is an error wrapping multiple
// validation errors returned by
// AssignedSubjectsFromRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignedSubjectsFromRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedSubjectsFromRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedSubjectsFromRoleResponseMultiError) AllErrors() []error { return m }

// AssignedSubjectsFromRoleResponseValidationError is the validation error
// returned by AssignedSubjectsFromRoleResponse.Validate if the designated
// constraints aren't met.
type AssignedSubjectsFromRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedSubjectsFromRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedSubjectsFromRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedSubjectsFromRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedSubjectsFromRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedSubjectsFromRoleResponseValidationError) ErrorName() string {
	return "AssignedSubjectsFromRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedSubjectsFromRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedSubjectsFromRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedSubjectsFromRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedSubjectsFromRoleResponseValidationError{}

// Validate checks the field values on AssignedRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignedRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignedRolesResponseMultiError, or nil if none found.
func (m *AssignedRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssignedRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssignedRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssignedRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return AssignedRolesResponseMultiError(errors)
	}

	return nil
}

// AssignedRolesResponseMultiError is an error wrapping multiple validation
// errors returned by AssignedRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignedRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedRolesResponseMultiError) AllErrors() []error { return m }

// AssignedRolesResponseValidationError is the validation error returned by
// AssignedRolesResponse.Validate if the designated constraints aren't met.
type AssignedRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedRolesResponseValidationError) ErrorName() string {
	return "AssignedRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedRolesResponseValidationError{}
