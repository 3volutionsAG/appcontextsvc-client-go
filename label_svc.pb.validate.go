// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: label_svc.proto

package appcontextsvc_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _label_svc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListLabelResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLabelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLabelResponseMultiError, or nil if none found.
func (m *ListLabelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLabelResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLabelResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLabelResponseValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListLabelResponseMultiError(errors)
	}

	return nil
}

// ListLabelResponseMultiError is an error wrapping multiple validation errors
// returned by ListLabelResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLabelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabelResponseMultiError) AllErrors() []error { return m }

// ListLabelResponseValidationError is the validation error returned by
// ListLabelResponse.Validate if the designated constraints aren't met.
type ListLabelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabelResponseValidationError) ErrorName() string {
	return "ListLabelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabelResponseValidationError{}

// Validate checks the field values on CreateLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLabelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLabelRequestMultiError, or nil if none found.
func (m *CreateLabelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLabelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLabel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLabelRequestValidationError{
					field:  "Label",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLabelRequestValidationError{
					field:  "Label",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLabelRequestValidationError{
				field:  "Label",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLabelRequestMultiError(errors)
	}

	return nil
}

// CreateLabelRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLabelRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLabelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLabelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLabelRequestMultiError) AllErrors() []error { return m }

// CreateLabelRequestValidationError is the validation error returned by
// CreateLabelRequest.Validate if the designated constraints aren't met.
type CreateLabelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLabelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLabelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLabelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLabelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLabelRequestValidationError) ErrorName() string {
	return "CreateLabelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLabelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLabelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLabelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLabelRequestValidationError{}

// Validate checks the field values on DeleteLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLabelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLabelRequestMultiError, or nil if none found.
func (m *DeleteLabelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLabelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteLabelRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLabelRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteLabelRequest) _validateUuid(uuid string) error {
	if matched := _label_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteLabelRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteLabelRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteLabelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLabelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLabelRequestMultiError) AllErrors() []error { return m }

// DeleteLabelRequestValidationError is the validation error returned by
// DeleteLabelRequest.Validate if the designated constraints aren't met.
type DeleteLabelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLabelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLabelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLabelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLabelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLabelRequestValidationError) ErrorName() string {
	return "DeleteLabelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLabelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLabelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLabelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLabelRequestValidationError{}

// Validate checks the field values on GetLabelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLabelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLabelRequestMultiError, or nil if none found.
func (m *GetLabelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLabelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetLabelRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLabelRequestMultiError(errors)
	}

	return nil
}

func (m *GetLabelRequest) _validateUuid(uuid string) error {
	if matched := _label_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLabelRequestMultiError is an error wrapping multiple validation errors
// returned by GetLabelRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLabelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLabelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLabelRequestMultiError) AllErrors() []error { return m }

// GetLabelRequestValidationError is the validation error returned by
// GetLabelRequest.Validate if the designated constraints aren't met.
type GetLabelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelRequestValidationError) ErrorName() string { return "GetLabelRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLabelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelRequestValidationError{}

// Validate checks the field values on UpdateLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLabelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLabelRequestMultiError, or nil if none found.
func (m *UpdateLabelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLabelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLabel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLabelRequestValidationError{
					field:  "Label",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLabelRequestValidationError{
					field:  "Label",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLabelRequestValidationError{
				field:  "Label",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLabelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLabelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLabelRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLabelRequestMultiError(errors)
	}

	return nil
}

// UpdateLabelRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateLabelRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateLabelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLabelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLabelRequestMultiError) AllErrors() []error { return m }

// UpdateLabelRequestValidationError is the validation error returned by
// UpdateLabelRequest.Validate if the designated constraints aren't met.
type UpdateLabelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabelRequestValidationError) ErrorName() string {
	return "UpdateLabelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabelRequestValidationError{}
