// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package appcontextsvc_client_go

import (
	context "context"
	base "gitlab.com/place-me/appcontextsvc-client-go/base"
	models "gitlab.com/place-me/appcontextsvc-client-go/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalConnectionServiceClient is the client API for ExternalConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalConnectionServiceClient interface {
	ListExternalConnections(ctx context.Context, in *base.ListRequest, opts ...grpc.CallOption) (*ListExternalConnectionsResponse, error)
	GetExternalConnection(ctx context.Context, in *GetExternalConnectionRequest, opts ...grpc.CallOption) (*models.ExternalConnection, error)
	CreateExternalConnection(ctx context.Context, in *CreateExternalConnectionRequest, opts ...grpc.CallOption) (*models.ExternalConnection, error)
	UpdateExternalConnection(ctx context.Context, in *UpdateExternalConnectionRequest, opts ...grpc.CallOption) (*models.ExternalConnection, error)
	DeleteExternalConnection(ctx context.Context, in *DeleteExternalConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type externalConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalConnectionServiceClient(cc grpc.ClientConnInterface) ExternalConnectionServiceClient {
	return &externalConnectionServiceClient{cc}
}

func (c *externalConnectionServiceClient) ListExternalConnections(ctx context.Context, in *base.ListRequest, opts ...grpc.CallOption) (*ListExternalConnectionsResponse, error) {
	out := new(ListExternalConnectionsResponse)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalConnectionService/ListExternalConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConnectionServiceClient) GetExternalConnection(ctx context.Context, in *GetExternalConnectionRequest, opts ...grpc.CallOption) (*models.ExternalConnection, error) {
	out := new(models.ExternalConnection)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalConnectionService/GetExternalConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConnectionServiceClient) CreateExternalConnection(ctx context.Context, in *CreateExternalConnectionRequest, opts ...grpc.CallOption) (*models.ExternalConnection, error) {
	out := new(models.ExternalConnection)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalConnectionService/CreateExternalConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConnectionServiceClient) UpdateExternalConnection(ctx context.Context, in *UpdateExternalConnectionRequest, opts ...grpc.CallOption) (*models.ExternalConnection, error) {
	out := new(models.ExternalConnection)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalConnectionService/UpdateExternalConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConnectionServiceClient) DeleteExternalConnection(ctx context.Context, in *DeleteExternalConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appcontext.services.ExternalConnectionService/DeleteExternalConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalConnectionServiceServer is the server API for ExternalConnectionService service.
// All implementations must embed UnimplementedExternalConnectionServiceServer
// for forward compatibility
type ExternalConnectionServiceServer interface {
	ListExternalConnections(context.Context, *base.ListRequest) (*ListExternalConnectionsResponse, error)
	GetExternalConnection(context.Context, *GetExternalConnectionRequest) (*models.ExternalConnection, error)
	CreateExternalConnection(context.Context, *CreateExternalConnectionRequest) (*models.ExternalConnection, error)
	UpdateExternalConnection(context.Context, *UpdateExternalConnectionRequest) (*models.ExternalConnection, error)
	DeleteExternalConnection(context.Context, *DeleteExternalConnectionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedExternalConnectionServiceServer()
}

// UnimplementedExternalConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalConnectionServiceServer struct {
}

func (UnimplementedExternalConnectionServiceServer) ListExternalConnections(context.Context, *base.ListRequest) (*ListExternalConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalConnections not implemented")
}
func (UnimplementedExternalConnectionServiceServer) GetExternalConnection(context.Context, *GetExternalConnectionRequest) (*models.ExternalConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalConnection not implemented")
}
func (UnimplementedExternalConnectionServiceServer) CreateExternalConnection(context.Context, *CreateExternalConnectionRequest) (*models.ExternalConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalConnection not implemented")
}
func (UnimplementedExternalConnectionServiceServer) UpdateExternalConnection(context.Context, *UpdateExternalConnectionRequest) (*models.ExternalConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalConnection not implemented")
}
func (UnimplementedExternalConnectionServiceServer) DeleteExternalConnection(context.Context, *DeleteExternalConnectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalConnection not implemented")
}
func (UnimplementedExternalConnectionServiceServer) mustEmbedUnimplementedExternalConnectionServiceServer() {
}

// UnsafeExternalConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalConnectionServiceServer will
// result in compilation errors.
type UnsafeExternalConnectionServiceServer interface {
	mustEmbedUnimplementedExternalConnectionServiceServer()
}

func RegisterExternalConnectionServiceServer(s grpc.ServiceRegistrar, srv ExternalConnectionServiceServer) {
	s.RegisterService(&ExternalConnectionService_ServiceDesc, srv)
}

func _ExternalConnectionService_ListExternalConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConnectionServiceServer).ListExternalConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalConnectionService/ListExternalConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConnectionServiceServer).ListExternalConnections(ctx, req.(*base.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConnectionService_GetExternalConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConnectionServiceServer).GetExternalConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalConnectionService/GetExternalConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConnectionServiceServer).GetExternalConnection(ctx, req.(*GetExternalConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConnectionService_CreateExternalConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConnectionServiceServer).CreateExternalConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalConnectionService/CreateExternalConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConnectionServiceServer).CreateExternalConnection(ctx, req.(*CreateExternalConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConnectionService_UpdateExternalConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConnectionServiceServer).UpdateExternalConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalConnectionService/UpdateExternalConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConnectionServiceServer).UpdateExternalConnection(ctx, req.(*UpdateExternalConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConnectionService_DeleteExternalConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConnectionServiceServer).DeleteExternalConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.ExternalConnectionService/DeleteExternalConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConnectionServiceServer).DeleteExternalConnection(ctx, req.(*DeleteExternalConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalConnectionService_ServiceDesc is the grpc.ServiceDesc for ExternalConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appcontext.services.ExternalConnectionService",
	HandlerType: (*ExternalConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExternalConnections",
			Handler:    _ExternalConnectionService_ListExternalConnections_Handler,
		},
		{
			MethodName: "GetExternalConnection",
			Handler:    _ExternalConnectionService_GetExternalConnection_Handler,
		},
		{
			MethodName: "CreateExternalConnection",
			Handler:    _ExternalConnectionService_CreateExternalConnection_Handler,
		},
		{
			MethodName: "UpdateExternalConnection",
			Handler:    _ExternalConnectionService_UpdateExternalConnection_Handler,
		},
		{
			MethodName: "DeleteExternalConnection",
			Handler:    _ExternalConnectionService_DeleteExternalConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external_connection_svc.proto",
}
