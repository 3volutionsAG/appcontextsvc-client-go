// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ory/keto/acl/v1alpha1/write_service.proto

package acl

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TransactRelationTuplesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactRelationTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactRelationTuplesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TransactRelationTuplesRequestMultiError, or nil if none found.
func (m *TransactRelationTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactRelationTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelationTupleDeltas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactRelationTuplesRequestValidationError{
						field:  fmt.Sprintf("RelationTupleDeltas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactRelationTuplesRequestValidationError{
						field:  fmt.Sprintf("RelationTupleDeltas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactRelationTuplesRequestValidationError{
					field:  fmt.Sprintf("RelationTupleDeltas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TransactRelationTuplesRequestMultiError(errors)
	}

	return nil
}

// TransactRelationTuplesRequestMultiError is an error wrapping multiple
// validation errors returned by TransactRelationTuplesRequest.ValidateAll()
// if the designated constraints aren't met.
type TransactRelationTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactRelationTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactRelationTuplesRequestMultiError) AllErrors() []error { return m }

// TransactRelationTuplesRequestValidationError is the validation error
// returned by TransactRelationTuplesRequest.Validate if the designated
// constraints aren't met.
type TransactRelationTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactRelationTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactRelationTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactRelationTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactRelationTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactRelationTuplesRequestValidationError) ErrorName() string {
	return "TransactRelationTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransactRelationTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactRelationTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactRelationTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactRelationTuplesRequestValidationError{}

// Validate checks the field values on RelationTupleDelta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationTupleDelta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationTupleDelta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationTupleDeltaMultiError, or nil if none found.
func (m *RelationTupleDelta) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationTupleDelta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetRelationTuple()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationTupleDeltaValidationError{
					field:  "RelationTuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationTupleDeltaValidationError{
					field:  "RelationTuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationTuple()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationTupleDeltaValidationError{
				field:  "RelationTuple",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationTupleDeltaMultiError(errors)
	}

	return nil
}

// RelationTupleDeltaMultiError is an error wrapping multiple validation errors
// returned by RelationTupleDelta.ValidateAll() if the designated constraints
// aren't met.
type RelationTupleDeltaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationTupleDeltaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationTupleDeltaMultiError) AllErrors() []error { return m }

// RelationTupleDeltaValidationError is the validation error returned by
// RelationTupleDelta.Validate if the designated constraints aren't met.
type RelationTupleDeltaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationTupleDeltaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationTupleDeltaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationTupleDeltaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationTupleDeltaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationTupleDeltaValidationError) ErrorName() string {
	return "RelationTupleDeltaValidationError"
}

// Error satisfies the builtin error interface
func (e RelationTupleDeltaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationTupleDelta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationTupleDeltaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationTupleDeltaValidationError{}

// Validate checks the field values on TransactRelationTuplesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactRelationTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactRelationTuplesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TransactRelationTuplesResponseMultiError, or nil if none found.
func (m *TransactRelationTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactRelationTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransactRelationTuplesResponseMultiError(errors)
	}

	return nil
}

// TransactRelationTuplesResponseMultiError is an error wrapping multiple
// validation errors returned by TransactRelationTuplesResponse.ValidateAll()
// if the designated constraints aren't met.
type TransactRelationTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactRelationTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactRelationTuplesResponseMultiError) AllErrors() []error { return m }

// TransactRelationTuplesResponseValidationError is the validation error
// returned by TransactRelationTuplesResponse.Validate if the designated
// constraints aren't met.
type TransactRelationTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactRelationTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactRelationTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactRelationTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactRelationTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactRelationTuplesResponseValidationError) ErrorName() string {
	return "TransactRelationTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactRelationTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactRelationTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactRelationTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactRelationTuplesResponseValidationError{}
