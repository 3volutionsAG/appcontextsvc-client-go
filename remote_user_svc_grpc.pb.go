// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: remote_user_svc.proto

package appcontextsvc_client

import (
	context "context"
	models "gitlab.com/place-me/appcontextsvc-client-go/models"
	common "gitlab.com/place-me/place-to-go/grpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteUserServiceClient is the client API for RemoteUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteUserServiceClient interface {
	ListRemoteUsers(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*ListRemoteUsersResponse, error)
	GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, opts ...grpc.CallOption) (*models.RemoteUser, error)
	GetProfilePhoto(ctx context.Context, in *GetProfilePhotoRequest, opts ...grpc.CallOption) (*models.ProfilePhoto, error)
}

type remoteUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteUserServiceClient(cc grpc.ClientConnInterface) RemoteUserServiceClient {
	return &remoteUserServiceClient{cc}
}

func (c *remoteUserServiceClient) ListRemoteUsers(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*ListRemoteUsersResponse, error) {
	out := new(ListRemoteUsersResponse)
	err := c.cc.Invoke(ctx, "/appcontext.services.RemoteUserService/ListRemoteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteUserServiceClient) GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, opts ...grpc.CallOption) (*models.RemoteUser, error) {
	out := new(models.RemoteUser)
	err := c.cc.Invoke(ctx, "/appcontext.services.RemoteUserService/GetRemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteUserServiceClient) GetProfilePhoto(ctx context.Context, in *GetProfilePhotoRequest, opts ...grpc.CallOption) (*models.ProfilePhoto, error) {
	out := new(models.ProfilePhoto)
	err := c.cc.Invoke(ctx, "/appcontext.services.RemoteUserService/GetProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteUserServiceServer is the server API for RemoteUserService service.
// All implementations must embed UnimplementedRemoteUserServiceServer
// for forward compatibility
type RemoteUserServiceServer interface {
	ListRemoteUsers(context.Context, *common.ListRequest) (*ListRemoteUsersResponse, error)
	GetRemoteUser(context.Context, *GetRemoteUserRequest) (*models.RemoteUser, error)
	GetProfilePhoto(context.Context, *GetProfilePhotoRequest) (*models.ProfilePhoto, error)
	mustEmbedUnimplementedRemoteUserServiceServer()
}

// UnimplementedRemoteUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteUserServiceServer struct {
}

func (UnimplementedRemoteUserServiceServer) ListRemoteUsers(context.Context, *common.ListRequest) (*ListRemoteUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemoteUsers not implemented")
}
func (UnimplementedRemoteUserServiceServer) GetRemoteUser(context.Context, *GetRemoteUserRequest) (*models.RemoteUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteUser not implemented")
}
func (UnimplementedRemoteUserServiceServer) GetProfilePhoto(context.Context, *GetProfilePhotoRequest) (*models.ProfilePhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilePhoto not implemented")
}
func (UnimplementedRemoteUserServiceServer) mustEmbedUnimplementedRemoteUserServiceServer() {}

// UnsafeRemoteUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteUserServiceServer will
// result in compilation errors.
type UnsafeRemoteUserServiceServer interface {
	mustEmbedUnimplementedRemoteUserServiceServer()
}

func RegisterRemoteUserServiceServer(s grpc.ServiceRegistrar, srv RemoteUserServiceServer) {
	s.RegisterService(&RemoteUserService_ServiceDesc, srv)
}

func _RemoteUserService_ListRemoteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteUserServiceServer).ListRemoteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.RemoteUserService/ListRemoteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteUserServiceServer).ListRemoteUsers(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteUserService_GetRemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteUserServiceServer).GetRemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.RemoteUserService/GetRemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteUserServiceServer).GetRemoteUser(ctx, req.(*GetRemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteUserService_GetProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteUserServiceServer).GetProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcontext.services.RemoteUserService/GetProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteUserServiceServer).GetProfilePhoto(ctx, req.(*GetProfilePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteUserService_ServiceDesc is the grpc.ServiceDesc for RemoteUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appcontext.services.RemoteUserService",
	HandlerType: (*RemoteUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRemoteUsers",
			Handler:    _RemoteUserService_ListRemoteUsers_Handler,
		},
		{
			MethodName: "GetRemoteUser",
			Handler:    _RemoteUserService_GetRemoteUser_Handler,
		},
		{
			MethodName: "GetProfilePhoto",
			Handler:    _RemoteUserService_GetProfilePhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote_user_svc.proto",
}
