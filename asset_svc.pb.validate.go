// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asset_svc.proto

package appcontextsvc_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _asset_svc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssetsResponseMultiError, or nil if none found.
func (m *ListAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssetsResponseValidationError{
						field:  fmt.Sprintf("Assets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssetsResponseValidationError{
						field:  fmt.Sprintf("Assets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssetsResponseValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListAssetsResponseMultiError(errors)
	}

	return nil
}

// ListAssetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAssetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssetsResponseMultiError) AllErrors() []error { return m }

// ListAssetsResponseValidationError is the validation error returned by
// ListAssetsResponse.Validate if the designated constraints aren't met.
type ListAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsResponseValidationError) ErrorName() string {
	return "ListAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsResponseValidationError{}

// Validate checks the field values on GetAssetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetRequestMultiError, or nil if none found.
func (m *GetAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetAssetRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAssetRequestMultiError(errors)
	}

	return nil
}

func (m *GetAssetRequest) _validateUuid(uuid string) error {
	if matched := _asset_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAssetRequestMultiError is an error wrapping multiple validation errors
// returned by GetAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetRequestMultiError) AllErrors() []error { return m }

// GetAssetRequestValidationError is the validation error returned by
// GetAssetRequest.Validate if the designated constraints aren't met.
type GetAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetRequestValidationError) ErrorName() string { return "GetAssetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetRequestValidationError{}

// Validate checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssetRequestMultiError, or nil if none found.
func (m *CreateAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAssetRequestMultiError(errors)
	}

	return nil
}

// CreateAssetRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetRequestMultiError) AllErrors() []error { return m }

// CreateAssetRequestValidationError is the validation error returned by
// CreateAssetRequest.Validate if the designated constraints aren't met.
type CreateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetRequestValidationError) ErrorName() string {
	return "CreateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetRequestValidationError{}

// Validate checks the field values on UpdateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssetRequestMultiError, or nil if none found.
func (m *UpdateAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssetRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssetRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssetRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAssetRequestMultiError(errors)
	}

	return nil
}

// UpdateAssetRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssetRequestMultiError) AllErrors() []error { return m }

// UpdateAssetRequestValidationError is the validation error returned by
// UpdateAssetRequest.Validate if the designated constraints aren't met.
type UpdateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetRequestValidationError) ErrorName() string {
	return "UpdateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetRequestValidationError{}

// Validate checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssetRequestMultiError, or nil if none found.
func (m *DeleteAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteAssetRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAssetRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteAssetRequest) _validateUuid(uuid string) error {
	if matched := _asset_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAssetRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssetRequestMultiError) AllErrors() []error { return m }

// DeleteAssetRequestValidationError is the validation error returned by
// DeleteAssetRequest.Validate if the designated constraints aren't met.
type DeleteAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetRequestValidationError) ErrorName() string {
	return "DeleteAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetRequestValidationError{}

// Validate checks the field values on AddSeatingToAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSeatingToAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSeatingToAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSeatingToAssetRequestMultiError, or nil if none found.
func (m *AddSeatingToAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSeatingToAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAssetId()); err != nil {
		err = AddSeatingToAssetRequestValidationError{
			field:  "AssetId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetSeatingId()); err != nil {
		err = AddSeatingToAssetRequestValidationError{
			field:  "SeatingId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDefault

	if m.Capacity != nil {
		// no validation rules for Capacity
	}

	if len(errors) > 0 {
		return AddSeatingToAssetRequestMultiError(errors)
	}

	return nil
}

func (m *AddSeatingToAssetRequest) _validateUuid(uuid string) error {
	if matched := _asset_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddSeatingToAssetRequestMultiError is an error wrapping multiple validation
// errors returned by AddSeatingToAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type AddSeatingToAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSeatingToAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSeatingToAssetRequestMultiError) AllErrors() []error { return m }

// AddSeatingToAssetRequestValidationError is the validation error returned by
// AddSeatingToAssetRequest.Validate if the designated constraints aren't met.
type AddSeatingToAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSeatingToAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSeatingToAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSeatingToAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSeatingToAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSeatingToAssetRequestValidationError) ErrorName() string {
	return "AddSeatingToAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSeatingToAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSeatingToAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSeatingToAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSeatingToAssetRequestValidationError{}

// Validate checks the field values on UpdateSeatingFromAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSeatingFromAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSeatingFromAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSeatingFromAssetRequestMultiError, or nil if none found.
func (m *UpdateSeatingFromAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSeatingFromAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAssetId()); err != nil {
		err = UpdateSeatingFromAssetRequestValidationError{
			field:  "AssetId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetSeatingId()); err != nil {
		err = UpdateSeatingFromAssetRequestValidationError{
			field:  "SeatingId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Capacity != nil {
		// no validation rules for Capacity
	}

	if m.IsDefault != nil {
		// no validation rules for IsDefault
	}

	if len(errors) > 0 {
		return UpdateSeatingFromAssetRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateSeatingFromAssetRequest) _validateUuid(uuid string) error {
	if matched := _asset_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateSeatingFromAssetRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSeatingFromAssetRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateSeatingFromAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSeatingFromAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSeatingFromAssetRequestMultiError) AllErrors() []error { return m }

// UpdateSeatingFromAssetRequestValidationError is the validation error
// returned by UpdateSeatingFromAssetRequest.Validate if the designated
// constraints aren't met.
type UpdateSeatingFromAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSeatingFromAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSeatingFromAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSeatingFromAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSeatingFromAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSeatingFromAssetRequestValidationError) ErrorName() string {
	return "UpdateSeatingFromAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSeatingFromAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSeatingFromAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSeatingFromAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSeatingFromAssetRequestValidationError{}

// Validate checks the field values on RemoveSeatingFromAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSeatingFromAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSeatingFromAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveSeatingFromAssetRequestMultiError, or nil if none found.
func (m *RemoveSeatingFromAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSeatingFromAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAssetId()); err != nil {
		err = RemoveSeatingFromAssetRequestValidationError{
			field:  "AssetId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetSeatingId()); err != nil {
		err = RemoveSeatingFromAssetRequestValidationError{
			field:  "SeatingId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveSeatingFromAssetRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveSeatingFromAssetRequest) _validateUuid(uuid string) error {
	if matched := _asset_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveSeatingFromAssetRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveSeatingFromAssetRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveSeatingFromAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSeatingFromAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSeatingFromAssetRequestMultiError) AllErrors() []error { return m }

// RemoveSeatingFromAssetRequestValidationError is the validation error
// returned by RemoveSeatingFromAssetRequest.Validate if the designated
// constraints aren't met.
type RemoveSeatingFromAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSeatingFromAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSeatingFromAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSeatingFromAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSeatingFromAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSeatingFromAssetRequestValidationError) ErrorName() string {
	return "RemoveSeatingFromAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSeatingFromAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSeatingFromAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSeatingFromAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSeatingFromAssetRequestValidationError{}
